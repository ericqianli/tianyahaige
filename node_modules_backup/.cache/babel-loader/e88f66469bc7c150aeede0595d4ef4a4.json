{"ast":null,"code":"import{connect}from\"react-redux\";import{receiveContent,receiveContentError,requestContent}from\"../action/Actions\";import Content from\"../component/Content\";import{getLines,getPages,getPoems}from\"../selector/ContentStateSelector\";import DBUtil from\"../util/DBUtil\";import{getSampled}from\"../selector/AppStateSelector\";function mapStateToProps(state,ownProps){return{poems:getPoems(state),lines:getLines(state),pages:getPages(state),sampled:getSampled(state),path:ownProps.location.pathname};}function mapDispatchToProps(dispatch){return{fetchContent:async(collection,sampled)=>{dispatch(requestContent());try{const content=await DBUtil.fetchPoemsByCollection(collection,sampled);dispatch(receiveContent(content));}catch(error){dispatch(receiveContentError(error));}}};}const ContentContainer=connect(mapStateToProps,mapDispatchToProps)(Content);export default ContentContainer;","map":{"version":3,"names":["connect","receiveContent","receiveContentError","requestContent","Content","getLines","getPages","getPoems","DBUtil","getSampled","mapStateToProps","state","ownProps","poems","lines","pages","sampled","path","location","pathname","mapDispatchToProps","dispatch","fetchContent","collection","content","fetchPoemsByCollection","error","ContentContainer"],"sources":["/Users/liqian/projects/tianyahaige/src/container/ContentContainer.ts"],"sourcesContent":["import { connect } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Dispatch } from \"redux\";\n\nimport {\n    receiveContent,\n    receiveContentError,\n    requestContent,\n} from \"../action/Actions\";\nimport Content from \"../component/Content\";\nimport { State } from \"../reducer/Reducer\";\nimport { getLines, getPages, getPoems } from \"../selector/ContentStateSelector\";\nimport DBUtil from \"../util/DBUtil\";\nimport { getSampled } from \"../selector/AppStateSelector\";\n\ninterface OwnProps extends RouteComponentProps {\n    sampled: boolean;\n}\n\nfunction mapStateToProps(state: State, ownProps: OwnProps) {\n    return {\n        poems: getPoems(state),\n        lines: getLines(state),\n        pages: getPages(state),\n        sampled: getSampled(state),\n        path: ownProps.location.pathname,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        fetchContent: async (collection: number, sampled: boolean) => {\n            dispatch(requestContent());\n            try {\n                const content = await DBUtil.fetchPoemsByCollection(\n                    collection,\n                    sampled\n                );\n                dispatch(receiveContent(content));\n            } catch (error) {\n                dispatch(receiveContentError(error));\n            }\n        },\n    };\n}\n\nconst ContentContainer = connect(mapStateToProps, mapDispatchToProps)(Content);\n\nexport default ContentContainer;\n"],"mappings":"AAAA,OAASA,OAAO,KAAQ,aAAa,CAIrC,OACIC,cAAc,CACdC,mBAAmB,CACnBC,cAAc,KACX,mBAAmB,CAC1B,MAAO,CAAAC,OAAO,KAAM,sBAAsB,CAE1C,OAASC,QAAQ,CAAEC,QAAQ,CAAEC,QAAQ,KAAQ,kCAAkC,CAC/E,MAAO,CAAAC,MAAM,KAAM,gBAAgB,CACnC,OAASC,UAAU,KAAQ,8BAA8B,CAMzD,QAAS,CAAAC,eAAeA,CAACC,KAAY,CAAEC,QAAkB,CAAE,CACvD,MAAO,CACHC,KAAK,CAAEN,QAAQ,CAACI,KAAK,CAAC,CACtBG,KAAK,CAAET,QAAQ,CAACM,KAAK,CAAC,CACtBI,KAAK,CAAET,QAAQ,CAACK,KAAK,CAAC,CACtBK,OAAO,CAAEP,UAAU,CAACE,KAAK,CAAC,CAC1BM,IAAI,CAAEL,QAAQ,CAACM,QAAQ,CAACC,QAC5B,CAAC,CACL,CAEA,QAAS,CAAAC,kBAAkBA,CAACC,QAAkB,CAAE,CAC5C,MAAO,CACHC,YAAY,CAAE,KAAAA,CAAOC,UAAkB,CAAEP,OAAgB,GAAK,CAC1DK,QAAQ,CAAClB,cAAc,CAAC,CAAC,CAAC,CAC1B,GAAI,CACA,KAAM,CAAAqB,OAAO,CAAG,KAAM,CAAAhB,MAAM,CAACiB,sBAAsB,CAC/CF,UAAU,CACVP,OACJ,CAAC,CACDK,QAAQ,CAACpB,cAAc,CAACuB,OAAO,CAAC,CAAC,CACrC,CAAE,MAAOE,KAAK,CAAE,CACZL,QAAQ,CAACnB,mBAAmB,CAACwB,KAAK,CAAC,CAAC,CACxC,CACJ,CACJ,CAAC,CACL,CAEA,KAAM,CAAAC,gBAAgB,CAAG3B,OAAO,CAACU,eAAe,CAAEU,kBAAkB,CAAC,CAAChB,OAAO,CAAC,CAE9E,cAAe,CAAAuB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module"}