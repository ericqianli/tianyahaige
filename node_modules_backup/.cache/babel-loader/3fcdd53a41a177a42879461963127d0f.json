{"ast":null,"code":"import { connect } from \"react-redux\";\nimport { receiveContent, receiveContentError, requestContent, toggleSampled } from \"../action/Actions\";\nimport App from \"../App\";\nimport { getSampled } from \"../selector/AppStateSelector\";\nimport DBUtil from \"../util/DBUtil\";\nfunction mapStateToProps(state) {\n  return {\n    sampled: getSampled(state)\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggleSampled: async (collection, sampled) => {\n      dispatch(toggleSampled());\n      dispatch(requestContent());\n      try {\n        const content = await DBUtil.fetchPoemsByCollection(collection, sampled);\n        dispatch(receiveContent(content));\n      } catch (error) {\n        dispatch(receiveContentError(error));\n      }\n    }\n  };\n}\nconst AppContainer = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default AppContainer;","map":{"version":3,"names":["connect","receiveContent","receiveContentError","requestContent","toggleSampled","App","getSampled","DBUtil","mapStateToProps","state","sampled","mapDispatchToProps","dispatch","collection","content","fetchPoemsByCollection","error","AppContainer"],"sources":["/Users/liqian/projects/tianyahaige/src/container/AppContainer.ts"],"sourcesContent":["import { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport {\n    receiveContent,\n    receiveContentError,\n    requestContent,\n    toggleSampled,\n} from \"../action/Actions\";\nimport App from \"../App\";\nimport { State } from \"../reducer/Reducer\";\nimport { getSampled } from \"../selector/AppStateSelector\";\nimport DBUtil from \"../util/DBUtil\";\n\nfunction mapStateToProps(state: State) {\n    return {\n        sampled: getSampled(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        toggleSampled: async (collection: number, sampled: boolean) => {\n            dispatch(toggleSampled());\n\n            dispatch(requestContent());\n            try {\n                const content = await DBUtil.fetchPoemsByCollection(\n                    collection,\n                    sampled\n                );\n                dispatch(receiveContent(content));\n            } catch (error) {\n                dispatch(receiveContentError(error));\n            }\n        },\n    };\n}\n\nconst AppContainer = connect(mapStateToProps, mapDispatchToProps)(App);\n\nexport default AppContainer;\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,aAAa;AAErC,SACIC,cAAc,EACdC,mBAAmB,EACnBC,cAAc,EACdC,aAAa,QACV,mBAAmB;AAC1B,OAAOC,GAAG,MAAM,QAAQ;AAExB,SAASC,UAAU,QAAQ,8BAA8B;AACzD,OAAOC,MAAM,MAAM,gBAAgB;AAEnC,SAASC,eAAeA,CAACC,KAAY,EAAE;EACnC,OAAO;IACHC,OAAO,EAAEJ,UAAU,CAACG,KAAK;EAC7B,CAAC;AACL;AAEA,SAASE,kBAAkBA,CAACC,QAAkB,EAAE;EAC5C,OAAO;IACHR,aAAa,EAAE,MAAAA,CAAOS,UAAkB,EAAEH,OAAgB,KAAK;MAC3DE,QAAQ,CAACR,aAAa,CAAC,CAAC,CAAC;MAEzBQ,QAAQ,CAACT,cAAc,CAAC,CAAC,CAAC;MAC1B,IAAI;QACA,MAAMW,OAAO,GAAG,MAAMP,MAAM,CAACQ,sBAAsB,CAC/CF,UAAU,EACVH,OACJ,CAAC;QACDE,QAAQ,CAACX,cAAc,CAACa,OAAO,CAAC,CAAC;MACrC,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZJ,QAAQ,CAACV,mBAAmB,CAACc,KAAK,CAAC,CAAC;MACxC;IACJ;EACJ,CAAC;AACL;AAEA,MAAMC,YAAY,GAAGjB,OAAO,CAACQ,eAAe,EAAEG,kBAAkB,CAAC,CAACN,GAAG,CAAC;AAEtE,eAAeY,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module"}