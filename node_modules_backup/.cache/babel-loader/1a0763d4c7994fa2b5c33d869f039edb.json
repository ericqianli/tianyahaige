{"ast":null,"code":"import { connect } from \"react-redux\";\nimport { receiveContent, receiveContentError, requestContent } from \"../action/Actions\";\nimport Content from \"../component/Content\";\nimport { getLines, getPages, getPoems } from \"../selector/ContentStateSelector\";\nimport DBUtil from \"../util/DBUtil\";\nimport { getSampled } from \"../selector/AppStateSelector\";\nfunction mapStateToProps(state, ownProps) {\n  return {\n    poems: getPoems(state),\n    lines: getLines(state),\n    pages: getPages(state),\n    sampled: getSampled(state),\n    path: ownProps.location.pathname\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchContent: async (collection, sampled) => {\n      dispatch(requestContent());\n      try {\n        const content = await DBUtil.fetchPoemsByCollection(collection, sampled);\n        dispatch(receiveContent(content));\n      } catch (error) {\n        dispatch(receiveContentError(error));\n      }\n    }\n  };\n}\nconst ContentContainer = connect(mapStateToProps, mapDispatchToProps)(Content);\nexport default ContentContainer;","map":{"version":3,"names":["connect","receiveContent","receiveContentError","requestContent","Content","getLines","getPages","getPoems","DBUtil","getSampled","mapStateToProps","state","ownProps","poems","lines","pages","sampled","path","location","pathname","mapDispatchToProps","dispatch","fetchContent","collection","content","fetchPoemsByCollection","error","ContentContainer"],"sources":["/Users/liqian/projects/tianyahaige/src/container/ContentContainer.ts"],"sourcesContent":["import { connect } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Dispatch } from \"redux\";\n\nimport {\n    receiveContent,\n    receiveContentError,\n    requestContent,\n} from \"../action/Actions\";\nimport Content from \"../component/Content\";\nimport { State } from \"../reducer/Reducer\";\nimport { getLines, getPages, getPoems } from \"../selector/ContentStateSelector\";\nimport DBUtil from \"../util/DBUtil\";\nimport { getSampled } from \"../selector/AppStateSelector\";\n\ninterface OwnProps extends RouteComponentProps {\n    sampled: boolean;\n}\n\nfunction mapStateToProps(state: State, ownProps: OwnProps) {\n    return {\n        poems: getPoems(state),\n        lines: getLines(state),\n        pages: getPages(state),\n        sampled: getSampled(state),\n        path: ownProps.location.pathname,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        fetchContent: async (collection: number, sampled: boolean) => {\n            dispatch(requestContent());\n            try {\n                const content = await DBUtil.fetchPoemsByCollection(\n                    collection,\n                    sampled\n                );\n                dispatch(receiveContent(content));\n            } catch (error) {\n                dispatch(receiveContentError(error));\n            }\n        },\n    };\n}\n\nconst ContentContainer = connect(mapStateToProps, mapDispatchToProps)(Content);\n\nexport default ContentContainer;\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,aAAa;AAIrC,SACIC,cAAc,EACdC,mBAAmB,EACnBC,cAAc,QACX,mBAAmB;AAC1B,OAAOC,OAAO,MAAM,sBAAsB;AAE1C,SAASC,QAAQ,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,kCAAkC;AAC/E,OAAOC,MAAM,MAAM,gBAAgB;AACnC,SAASC,UAAU,QAAQ,8BAA8B;AAMzD,SAASC,eAAeA,CAACC,KAAY,EAAEC,QAAkB,EAAE;EACvD,OAAO;IACHC,KAAK,EAAEN,QAAQ,CAACI,KAAK,CAAC;IACtBG,KAAK,EAAET,QAAQ,CAACM,KAAK,CAAC;IACtBI,KAAK,EAAET,QAAQ,CAACK,KAAK,CAAC;IACtBK,OAAO,EAAEP,UAAU,CAACE,KAAK,CAAC;IAC1BM,IAAI,EAAEL,QAAQ,CAACM,QAAQ,CAACC;EAC5B,CAAC;AACL;AAEA,SAASC,kBAAkBA,CAACC,QAAkB,EAAE;EAC5C,OAAO;IACHC,YAAY,EAAE,MAAAA,CAAOC,UAAkB,EAAEP,OAAgB,KAAK;MAC1DK,QAAQ,CAAClB,cAAc,CAAC,CAAC,CAAC;MAC1B,IAAI;QACA,MAAMqB,OAAO,GAAG,MAAMhB,MAAM,CAACiB,sBAAsB,CAC/CF,UAAU,EACVP,OACJ,CAAC;QACDK,QAAQ,CAACpB,cAAc,CAACuB,OAAO,CAAC,CAAC;MACrC,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZL,QAAQ,CAACnB,mBAAmB,CAACwB,KAAK,CAAC,CAAC;MACxC;IACJ;EACJ,CAAC;AACL;AAEA,MAAMC,gBAAgB,GAAG3B,OAAO,CAACU,eAAe,EAAEU,kBAAkB,CAAC,CAAChB,OAAO,CAAC;AAE9E,eAAeuB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module"}